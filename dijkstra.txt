#include <stdio.h> 
#include <limits.h> 
#define MAX 50 
int minDistance(int dist[], int sptSet[], int V) 
 { 
    int min = INT_MAX, minIndex; 
    for (int v = 0; v < V; v++)  
       { 
        if (!sptSet[v] && dist[v] < min) 
         { 
            min = dist[v]; 
            minIndex = v; 
        } 
    } 
    return minIndex; 
} 
 
void printSolution(int dist[], int V) 
 { 
    printf("Vertex \tDistance from Source\n"); 
    for (int i = 0; i < V; i++) 
   { 
        printf("%d \t%d\n", i, dist[i]); 
    } 
} 
void dijkstra(int graph[MAX][MAX], int src, int V)  
{ 
    int dist[MAX]; 
    int sptSet[MAX];  
    for (int i = 0; i < V; i++)  
   { 
        dist[i] = INT_MAX; 
        sptSet[i] = 0; 
    } 
 
    dist[src] = 0; 
        for (int count = 0; count < V - 1; count++) 
    { 
         
        int u = minDistance(dist, sptSet, V); 
        sptSet[u] = 1; 
        for (int v = 0; v < V; v++) 
         { 
            if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v]) 
            { 
                dist[v] = dist[u] + graph[u][v]; 
            } 
        } 
    } 
    printSolution(dist, V); 
} 
 
int main() { 
    int V; 
    printf("Input the number of vertices: "); 
    scanf("%d", &V); 
    int graph[MAX][MAX]; 
   printf("Input the adjacency matrix for the graph:\n"); 
    for (int i = 0; i < V; i++)  
        { 
        for (int j = 0; j < V; j++) 
           { 
            scanf("%d", &graph[i][j]); 
         } 
     } 
    int source; 
    printf("Input the source vertex: "); 
    scanf("%d", &source); 
    dijkstra(graph, source, V); 
    return 0; 
} 
 
 
 
 
