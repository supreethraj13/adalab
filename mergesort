#include<stdio.h>
#include<stdlib.h>
#include<time.h>

void merge(int arr[],int l,int m,int r){
    int i,j,k;
    int n1=m-l+1;
    int n2=r-m;
    int L[n1],R[n2];
    for ( i = 0; i < n1; i++)
    {
        L[i]=arr[l+i];
    }
    for ( j = 0; j < n2; j++)
    {
        R[j]=arr[m+1+j];
    }
    i=0;
    j=0;
    k=l;
    while (i<n1 && j<n2)
    {
        if (L[i]<=R[j])
        {
            arr[k]=L[i];
            i++;
        }
        else{
            arr[k]=R[j];
            j++;
        }
        k++;
        while (i<n1)
        {
            arr[k]=L[i];
            i++;
            k++;
        }
        while (j<n2)
        {
            arr[k]=R[j];
            j++;
            k++;
        }
        
        
        
    }
    
    
}
void mergesort(int arr[],int l,int r){
    if (l<r)
    {
        int mid=l+(r-1)/2;
        mergesort(arr,l,mid);
        mergesort(arr,mid+1,r);
        merge(arr,l,mid,r);
    }
    
}
int main(){
    int i,n;
    clock_t start,end;
    double cpu_time_used;
    printf("enter teh no of elements:");
    scanf("%d",&n);
    int *arr=(int *)malloc(n*sizeof(int));
    srand(time(0));
    for ( i = 0; i < n; i++)
    {
        arr[i]=rand()%10000;
    }
    start=clock();
    mergesort(arr,0,n-1);
    end=clock();
    cpu_time_used =((double)(end-start))/CLOCKS_PER_SEC;
    printf("sorted array:");
    for ( i = 0; i < n; i++)
    {
        printf("%d ",arr[i]);
    }
    printf("\n");
    printf("time taken to sort %f sec\n",cpu_time_used);
    free(arr);
    return 0;
}
